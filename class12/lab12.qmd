---
title: "Lab 12"
author: "Catherine Diep"
format: html
---

## Class 12

# Import countData and colData

```{r}
counts <- read.csv("https://bioboot.github.io/bimm143_W18/class-material/airway_scaledcounts.csv", row.names=1)

metadata <-  read.csv("https://bioboot.github.io/bimm143_W18/class-material/airway_metadata.csv")
```

```{r}
head(counts)
```

```{r}
head(metadata)
```

> 1.  How many genes are in this dataset?
38694 
>2. How many 'control' cell lines do we have? 
4 

```{r}
n.control <- sum(metadata$dex == "control")
```

# Toy differential gene expression 

```{r}
control <- metadata[metadata[,"dex"]=="control",]
control.counts <- counts[ ,control$id]
control.mean <- rowSums( control.counts )/4 
head(control.mean)
```

```{r}
library(dplyr)
control <- metadata %>% filter(dex=="control")
control.counts <- counts %>% select(control$id) 
control.mean <- rowSums(control.counts)/4
head(control.mean)
```

>3. Instead of dividing by 4, you should divide by the number of cell lines, which would account for any new samples added.
>4. 

```{r}
treated <- metadata[metadata[,"dex"]=="treated",]
treated.mean <- rowSums( counts[ ,treated$id] )/4 
names(treated.mean) <- counts$ensgene
treated
```

```{r}
meancounts <- data.frame (control.mean, treated.mean)
```

```{r}
colSums(meancounts)
```

>5(a). 

```{r}
plot(control.mean, treated.mean)
```

>5(b). 

```{r}
library("ggplot2")
ggplot(meancounts)+
  aes(control.mean, treated.mean)+
  geom_point()
```

>6. 

```{r}
plot(control.mean, treated.mean, log="xy")
```

```{r}
meancounts$log2fc <- log2(meancounts[,"treated.mean"]/meancounts[,"control.mean"])
head(meancounts)
```

```{r}
zero.vals <- which(meancounts[,1:2]==0, arr.ind=TRUE)

to.rm <- unique(zero.vals[,1])
mycounts <- meancounts[-to.rm,]
head(mycounts)
```

>Q.7 What is the purpose of the arr.ind argument in the which() function call above? Why would we then take the first column of the output and need to call the unique() function?
It returns the row and column indices with a value of zero, for us to identify which samples from which genes have zero expression. We need to call the unique function to get the unique gene names to remove both the control and experimental results of each gene. 

>Q8. Using the up.ind vector above can you determine how many up regulated genes we have at the greater than 2 fc level? 
250 

```{r}
up.ind <- mycounts$log2fc > 2
sum(up.ind)
```


>Q9. Using the down.ind vector above can you determine how many down regulated genes we have at the greater than 2 fc level? 
367 

```{r}
down.ind <- mycounts$log2fc < (-2)
sum(down.ind)
```


>Q10. Do you trust these results? Why or why not?
No, I do not trust these results because I do not know whether or not these results are statistically significant. 

# DESeq2 Analysis

```{r}
library(DESeq2)
citation("DESeq2")
```

```{r}
dds <- DESeqDataSetFromMatrix(countData=counts, 
                              colData=metadata, 
                              design=~dex)
dds
```

```{r}
dds <- DESeq(dds)
```

```{r}
res <- results(dds)
res
```

```{r}
summary(res)
```

```{r}
res05 <- results(dds, alpha=0.05)
summary(res05)
```

```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")
```

```{r}
columns(org.Hs.eg.db)
```

```{r}
res$symbol <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",        # The format of our genenames
                     column="SYMBOL",          # The new format we want to add
                     multiVals="first")
```

```{r}
head(res)
```

>Q11. Run the mapIds() function two more times to add the Entrez ID and UniProt accession and GENENAME as new columns called res$entrez, res$uniprot and res$genename.

```{r}
res$entrez <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="ENTREZID",
                     keytype="ENSEMBL",
                     multiVals="first")

res$uniprot <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="UNIPROT",
                     keytype="ENSEMBL",
                     multiVals="first")

res$genename <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="GENENAME",
                     keytype="ENSEMBL",
                     multiVals="first")

head(res)
```

```{r}
ord <- order( res$padj )
#View(res[ord,])
head(res[ord,])
```

```{r}
write.csv(res[ord,], "deseq_results.csv")
```

```{r}
plot( res$log2FoldChange,  -log(res$padj), 
      xlab="Log2(FoldChange)",
      ylab="-Log(P-value)")
```

#Pathway analysis with R and Bioconductor 

```{r}
library(pathview)
library(gage)
library(gageData)

data(kegg.sets.hs)

# Examine the first 2 pathways in this kegg set for humans
head(kegg.sets.hs, 2)
```

```{r}
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)
```

```{r}
# Get the results
keggres = gage(foldchanges, gsets=kegg.sets.hs)
```

```{r}
attributes(keggres)
```

```{r}
# Look at the first three down (less) pathways
head(keggres$less, 3)
```

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa05310")
```

>Q12. Can you do the same procedure as above to plot the pathview figures for the top 2 down-reguled pathways?

```{r}
head(keggres$greater, 2)
```

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa00500")
```

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa00330")
```

