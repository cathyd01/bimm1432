---
title: "Lab 16"
author: "Catherine Diep"
format: html
---

## Lab 16

1. Working with R-Seq Data 

>Q. How would you check that these files with extension ‘.fastq’ actually look like what we expect for a FASTQ file? You could try printing the first few lines to the shell standard output:

```{r}
#Fill in the blank
#head(SRR2156848_1.fastq)
```

>Q. How could you check the number of sequences in each file?

```{r}
# Fill in the blanks
#$ grep -c "SRR2156848_1.fastq" SRR2156848_1.fastq 
2959900
```

>Q. Check your answer with the bottom of the file using the tail command and also check the matching mate pair FASTQ file. Do these numbers match? If so why or why not?

Yes the numbers match; counting the sequence and finding the number of the last sequence yield the same result. 

>Q. Check you have pairs of FASTQ files for all datasets
```{r}
#fill in the blank 
#ls*.fastq
```

2. Transcription Quantification via Pseudoalignment 

```{r}
#Unzip and untar 
#tar -zxvf kallisto_linux-v0.44.0.tar.gz

#Fill in the blank 
#$ export path=$PATH:/home/ubuntu/kallisto_linux-v0.44.0 
```

>Q. Can you run kallisto to print out it’s citation information?
```{r}
#$ kallisto cite
```

```{r}
#kallisto quant -i hg19.ensembl -o SRR2156849_quant SRR2156849_1.fastq SRR2156849_2.fastq

#kallisto quant -i hg19.ensembl -o SRR2156850_quant SRR2156850_1.fastq SRR2156850_2.fastq

#kallisto quant -i hg19.ensembl -o SRR2156851_quant SRR2156851_1.fastq SRR2156851_2.fastq
```

>Q. What do you notice about the TSV file contents? 
They contain target ID, length, eff_length, estimated counts

```{r}
library(tximport)
library(rhdf5)

# setup the folder and filenames to read
folders <- dir(pattern="SRR21568*")
samples <- sub("_quant", "", folders)
files <- file.path( folders, "abundance.h5" )
names(files) <- samples

```

```{r}

txi.kallisto <- tximport(files, type = "kallisto", txOut = TRUE)
```

```{r}
head(txi.kallisto$counts)
```

```{r}
colSums(txi.kallisto$counts)
```

```{r}
sum(rowSums(txi.kallisto$counts)>0)
```

```{r}
to.keep <- rowSums(txi.kallisto$counts) > 0
kset.nonzero <- txi.kallisto$counts[to.keep,]
```

```{r}
keep2 <- apply(kset.nonzero,1,sd)>0
x <- kset.nonzero[keep2,]
```

## Principal Component Analysis

```{r}
pca <- prcomp(t(x), scale=TRUE)
summary(pca)
```

```{r}
plot(pca$x[,1], pca$x[,2],
     col=c("blue","blue","red","red"),
     xlab="PC1", ylab="PC2", pch=16)
```

>Q. Use ggplot to make a similar figure of PC1 vs PC2 and a seperate figure PC1 vs PC3 and PC2 vs PC3.

```{r}
library(ggplot2)
library(ggrepel)

# Make metadata object for the samples
colData <- data.frame(condition = factor(rep(c("control", "treatment"), each = 2)))
rownames(colData) <- colnames(txi.kallisto$counts)

# Make the data.frame for ggplot 
y <- as.data.frame(pca$x)
y$Condition <- as.factor(colData$condition)

ggplot(y) +
  aes(PC1, PC2, col=Condition) +
  geom_point() +
  geom_text_repel(label=rownames(y)) +
  theme_bw()

ggplot(y) +
  aes(PC1, PC3, col=Condition) +
  geom_point() +
  geom_text_repel(label=rownames(y)) +
  theme_bw()

ggplot(y) +
  aes(PC2, PC3, col=Condition) +
  geom_point() +
  geom_text_repel(label=rownames(y)) +
  theme_bw()
```

```{r}
library(DESeq2)
```

```{r}
sampleTable <- data.frame(condition = factor(rep(c("control", "treatment"), each = 2)))
rownames(sampleTable) <- colnames(txi.kallisto$counts)

dds <- DESeqDataSetFromTximport(txi.kallisto,
                                sampleTable, 
                                ~condition)
```

```{r}
dds <- DESeq(dds)
```

```{r}
res <- results(dds)
head(res)
```

```{r}
to.keep.2 <- rowSums(ddse) > 0
kset.nonzero.2 <- dds[to.keep.2,]
```

